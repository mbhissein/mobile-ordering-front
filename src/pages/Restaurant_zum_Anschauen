import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  Divider,
  useTheme,
  useMediaQuery,
  InputAdornment,
  IconButton,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Dialog, DialogTitle, DialogContent, DialogActions,
  Grid,
  Snackbar,
  Alert,
  Switch
} from '@mui/material';
import StoreIcon from '@mui/icons-material/Store';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import PhoneIcon from '@mui/icons-material/Phone';
import EmailIcon from '@mui/icons-material/Email';
import DescriptionIcon from '@mui/icons-material/Description';
import RestaurantIcon from '@mui/icons-material/Restaurant';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';

const API_URL = 'http://ec2-51-20-255-246.eu-north-1.compute.amazonaws.com:8000/api/v1/restaurants';

function Restaurant() {
  const [form, setForm] = useState({
    name: '',
    description: '',
    address: '',
    phone: '',
    email: ''
  });

  const [restaurants, setRestaurants] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [feedback, setFeedback] = useState({
    open: false,
    message: '',
    severity: 'success' // 'error', 'info', 'warning' oder 'success'
  });
  const [updatedRestaurant, setUpdatedRestaurant] = useState({
    id: '',
    name: '',
    address: '',
    phone: '',
    email: '',
    description: ''
  });

  const [filterText, setFilterText] = useState('');

  const handleToggleStatus = async (restaurant) => {
    try {
      if (restaurant.isActive) {
        // Deaktivieren
        await axios.delete(`${API_URL}/${restaurant.id}`);
        showFeedback('Restaurant wurde deaktiviert.', 'info');
      } else {
        // Reaktivieren
        await axios.patch(`${API_URL}/${restaurant.id}/reactivate`);
        showFeedback('Restaurant wurde reaktiviert.', 'success');
      }

      fetchRestaurants();
    } catch (error) {
      console.error('Fehler beim Umschalten des Status:', error);
      showFeedback('Statusänderung fehlgeschlagen.', 'error');
    }
  };

  const showFeedback = (message, severity = 'success') => {
    setFeedback({ open: true, message, severity });
  };

  const handleUpdate = async () => {
    try {
      const { id, name, description, address, phone, email } = updatedRestaurant;

      const response = await axios.patch(`${API_URL}/${id}`, {
        name,
        description,
        address,
        phone,
        email,
      });

      if (response.status === 200) {
        fetchRestaurants();
        handleDialogClose();
        showFeedback('Restaurant erfolgreich aktualisiert!', 'success');
      }
    } catch (error) {
      console.error('Fehler beim Aktualisieren des Restaurants:', error);
      showFeedback('Fehler beim Aktualisieren des Restaurants.', 'error');
    }
  };

  const handleDialogClose = () => {
    setEditDialogOpen(false);
    setUpdatedRestaurant({
      id: '',
      name: '',
      address: '',
      phone: '',
      email: '',
      description: ''
    });
  };

  useEffect(() => {
    fetchRestaurants();
  }, []);

  const fetchRestaurants = async () => {
    try {
      const response = await axios.get(API_URL);
      setRestaurants(response.data.data);
    } catch (error) {
      console.error('Fehler beim Laden der Restaurants:', error);
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await axios.post(API_URL, form);
      setForm({ name: '', description: '', address: '', phone: '', email: '' });
      setShowForm(false);
      fetchRestaurants();
      showFeedback('Restaurant erfolgreich gespeichert!', 'success');
    } catch (error) {
      console.error('Fehler beim Speichern:', error);
      showFeedback('Fehler beim Speichern des Restaurants.', 'error');
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Möchtest du dieses Restaurant wirklich löschen?')) return;

    try {
      await axios.delete(`${API_URL}/${id}`);
      fetchRestaurants();
      showFeedback('Restaurant erfolgreich gelöscht.', 'success');
    } catch (error) {
      console.error('Fehler beim Löschen:', error);
      showFeedback('Fehler beim Löschen des Restaurants.', 'error');
    }
  };

  const handleFilterChange = (e) => {
    setFilterText(e.target.value);
  };

  // Filterfunktion: Suche in name, description, address, phone, email (case insensitive)
  const filteredRestaurants = restaurants.filter((restaurant) => {
    const search = filterText.toLowerCase();
    return (
      restaurant.name.toLowerCase().includes(search) ||
      restaurant.description.toLowerCase().includes(search) ||
      restaurant.address.toLowerCase().includes(search) ||
      restaurant.phone.toLowerCase().includes(search) ||
      restaurant.email.toLowerCase().includes(search)
    );
  });

  const colors = {
    primary: '#8B2E2E',
    accent: '#D4AF37',
    background: '#F5EFE6',
    text: '#3E3E3E',
    white: '#FFFFFF',
    border: '#D6CCC2'
  };

  const textFieldStyle = {
    '& .MuiOutlinedInput-root': {
      borderRadius: 2,
      backgroundColor: colors.white,
      '& fieldset': {
        borderColor: colors.border
      },
      '&:hover fieldset': {
        borderColor: colors.accent
      },
      '&.Mui-focused fieldset': {
        borderColor: colors.primary,
        borderWidth: 2
      }
    }
  };

  return (
    <Box sx={{ minHeight: '100vh', backgroundColor: colors.background, py: 6 }}>
      <Container maxWidth="md">
        <Paper elevation={4} sx={{ borderRadius: 4, p: isMobile ? 3 : 5, backgroundColor: colors.white }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
            <Typography variant="h5" fontWeight="bold" sx={{ color: colors.primary }}>
              Restaurants
            </Typography>
            <Button
              variant="contained"
              sx={{
                backgroundColor: colors.primary,
                '&:hover': { backgroundColor: colors.accent },
                color: 'white'
              }}
              startIcon={<AddIcon />}
              onClick={() => setShowForm(!showForm)}
            >
              {showForm ? 'Abbrechen' : 'Hinzufügen'}
            </Button>
          </Box>

          <Divider sx={{ mb: 4, borderColor: colors.border }} />

          {showForm ? (
            <Box
              component="form"
              onSubmit={handleSubmit}
              display="flex"
              flexDirection="column"
              gap={3}
              alignItems="center"
            >
              {[
                { label: 'Name', name: 'name', icon: <RestaurantIcon /> },
                { label: 'Beschreibung', name: 'description', icon: <DescriptionIcon />, multiline: true, rows: 3 },
                { label: 'Adresse', name: 'address', icon: <LocationOnIcon /> },
                { label: 'Telefon', name: 'phone', icon: <PhoneIcon /> },
                { label: 'E-Mail', name: 'email', icon: <EmailIcon />, type: 'email' }
              ].map(({ label, name, icon, multiline, rows, type }) => (
                <TextField
                  key={name}
                  label={label}
                  name={name}
                  value={form[name]}
                  onChange={handleChange}
                  required
                  fullWidth
                  type={type || 'text'}
                  variant="outlined"
                  multiline={multiline}
                  rows={rows}
                  sx={{ ...textFieldStyle, maxWidth: 600 }}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        {React.cloneElement(icon, { sx: { color: colors.accent } })}
                      </InputAdornment>
                    )
                  }}
                />
              ))}

              <Button
                type="submit"
                variant="contained"
                size="large"
                sx={{
                  width: '100%',
                  maxWidth: 600,
                  backgroundColor: colors.primary,
                  color: colors.white,
                  borderRadius: 3,
                  fontWeight: 'bold',
                  fontSize: 18,
                  '&:hover': {
                    backgroundColor: colors.accent
                  }
                }}
              >
                Speichern
              </Button>
            </Box>
          ) : (
            <>
              <TextField
                label="Restaurants suchen"
                variant="outlined"
                fullWidth
                value={filterText}
                onChange={handleFilterChange}
                sx={{ mb: 3, ...textFieldStyle }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <RestaurantIcon sx={{ color: colors.accent }} />
                    </InputAdornment>
                  )
                }}
              />

              {filteredRestaurants.length === 0 ? (
                <Typography variant="body1" sx={{ color: colors.text, mt: 2, textAlign: 'center' }}>
                  Keine Restaurants gefunden.
                </Typography>
              ) : (
                <List sx={{ maxHeight: 550, overflowY: 'auto' }}>
                  {filteredRestaurants.map((restaurant) => (
                    <Paper
                      key={restaurant.id}
                      sx={{
                        mb: 2,
                        p: 2,
                        borderRadius: 3,
                        backgroundColor: colors.background,
                        border: `1px solid ${colors.border}`
                      }}
                      elevation={1}
                    >
                      <Grid container spacing={1} alignItems="center">
                        <Grid item xs={12} sm={8}>
                          <Typography
                            variant="h6"
                            sx={{
                              fontWeight: 'bold',
                              color: colors.primary,
                              overflowWrap: 'break-word'
                            }}
                          >
                            {restaurant.name}
                          </Typography>
                          <Typography variant="body2" sx={{ color: colors.text, mb: 1 }}>
                            {restaurant.description}
                          </Typography>
                          <Box display="flex" alignItems="center" flexWrap="wrap" gap={1} mb={0.5}>
                            <LocationOnIcon sx={{ color: colors.accent }} fontSize="small" />
                            <Typography variant="body2" sx={{ color: colors.text }}>
                              {restaurant.address}
                            </Typography>
                          </Box>
                          <Box display="flex" alignItems="center" gap={1} mb={0.5}>
                            <PhoneIcon sx={{ color: colors.accent }} fontSize="small" />
                            <Typography variant="body2" sx={{ color: colors.text }}>
                              {restaurant.phone}
                            </Typography>
                          </Box>
                          <Box display="flex" alignItems="center" gap={1}>
                            <EmailIcon sx={{ color: colors.accent }} fontSize="small" />
                            <Typography variant="body2" sx={{ color: colors.text }}>
                              {restaurant.email}
                            </Typography>
                          </Box>
                        </Grid>

                        <Grid
                          item
                          xs={12}
                          sm={4}
                          display="flex"
                          justifyContent={isMobile ? 'flex-start' : 'flex-end'}
                          gap={1}
                        >
                          <Button
                            variant="outlined"
                            startIcon={<EditIcon />}
                            onClick={() => {
                              setUpdatedRestaurant({
                                id: restaurant.id,
                                name: restaurant.name,
                                address: restaurant.address,
                                phone: restaurant.phone,
                                email: restaurant.email,
                                description: restaurant.description
                              });
                              setEditDialogOpen(true);
                            }}
                          >
                            Bearbeiten
                          </Button>
                          <Button
                            variant="outlined"
                            color="error"
                            startIcon={<DeleteIcon />}
                            onClick={() => handleDelete(restaurant.id)}
                          >
                            Löschen
                          </Button>
                          <Box display="flex" alignItems="center">
                            <Typography variant="body2" sx={{ mr: 1 }}>
                              {restaurant.isActive ? 'Aktiv' : 'Inaktiv'}
                            </Typography>
                            <Switch
                              checked={restaurant.isActive}
                              onChange={() => handleToggleStatus(restaurant)}
                              color="primary"
                            />
                          </Box>
                        </Grid>
                      </Grid>
                    </Paper>
                  ))}
                </List>
              )}
            </>
          )}

          <Dialog open={editDialogOpen} onClose={handleDialogClose} maxWidth="sm" fullWidth>
            <DialogTitle>Restaurant bearbeiten</DialogTitle>
            <DialogContent>
              <Box
                component="form"
                sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}
                noValidate
                autoComplete="off"
              >
                {[
                  { label: 'Name', name: 'name' },
                  { label: 'Beschreibung', name: 'description', multiline: true, rows: 3 },
                  { label: 'Adresse', name: 'address' },
                  { label: 'Telefon', name: 'phone' },
                  { label: 'E-Mail', name: 'email', type: 'email' }
                ].map(({ label, name, multiline, rows, type }) => (
                  <TextField
                    key={name}
                    label={label}
                    name={name}
                    value={updatedRestaurant[name]}
                    onChange={(e) =>
                      setUpdatedRestaurant({ ...updatedRestaurant, [name]: e.target.value })
                    }
                    fullWidth
                    variant="outlined"
                    multiline={multiline}
                    rows={rows}
                    type={type || 'text'}
                  />
                ))}
              </Box>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleDialogClose} color="inherit">
                Abbrechen
              </Button>
              <Button variant="contained" onClick={handleUpdate} sx={{ backgroundColor: colors.primary }}>
                Speichern
              </Button>
            </DialogActions>
          </Dialog>

          <Snackbar
            open={feedback.open}
            autoHideDuration={4000}
            onClose={() => setFeedback({ ...feedback, open: false })}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
          >
            <Alert
              onClose={() => setFeedback({ ...feedback, open: false })}
              severity={feedback.severity}
              sx={{ width: '100%' }}
            >
              {feedback.message}
            </Alert>
          </Snackbar>
        </Paper>
      </Container>
    </Box>
  );
}

export default Restaurant;
